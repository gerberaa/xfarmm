#!/usr/bin/env python3
"""
Fast Twitter Actions API - –∑ –∑–º–µ–Ω—à–µ–Ω–∏–º–∏ –∑–∞—Ç—Ä–∏–º–∫–∞–º–∏

–¶–µ–π –º–æ–¥—É–ª—å –æ–±—Ö–æ–¥–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–∞—Ç—Ä–∏–º–∫–∏ twscrape –¥–ª—è —à–≤–∏–¥—à–æ—ó —Ä–æ–±–æ—Ç–∏.
"""

import asyncio
import json
import random
import httpx
import time
from typing import Dict, Optional
from datetime import datetime, timedelta

from twscrape.accounts_pool import AccountsPool
from twscrape.account import TOKEN
from twscrape.api import GQL_FEATURES
from twitter_actions import TwitterActionsAPI, GRAPHQL_OPERATIONS


class FastTwitterActionsAPI:
    """
    –®–≤–∏–¥–∫–∞ –≤–µ—Ä—Å—ñ—è TwitterActionsAPI –∑ –≤–ª–∞—Å–Ω–∏–º —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è–º –∑–∞—Ç—Ä–∏–º–∫–∞–º–∏
    """
    
    def __init__(self, pool: AccountsPool, debug: bool = False, proxy: str = None):
        self.pool = pool
        self.debug = debug
        self.proxy = proxy
        # –í–ª–∞—Å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞—Ç—Ä–∏–º–æ–∫ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
        self.account_last_request = {}
        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (—Å–µ–∫—É–Ω–¥–∏)
        self.min_delay = 3  # 3 —Å–µ–∫—É–Ω–¥–∏ –∑–∞–º—ñ—Å—Ç—å 120
        
    async def _get_account_with_minimal_delay(self, queue_name: str = "FavoriteTweet"):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é"""
        accounts_info = await self.pool.accounts_info()
        active_accounts = [acc for acc in accounts_info if acc["active"]]
        
        if not active_accounts:
            return None
            
        # –ó–Ω–∞–π–¥–µ–º–æ –∞–∫–∞—É–Ω—Ç, —è–∫–∏–π –Ω–∞–π–¥–∞–≤–Ω—ñ—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤—Å—è
        best_account = None
        best_wait_time = float('inf')
        
        current_time = time.time()
        
        for acc_info in active_accounts:
            username = acc_info["username"]
            last_request_time = self.account_last_request.get(username, 0)
            wait_time = max(0, self.min_delay - (current_time - last_request_time))
            
            if wait_time < best_wait_time:
                best_wait_time = wait_time
                best_account = username
        
        if best_account and best_wait_time > 0:
            if self.debug:
                print(f"Waiting {best_wait_time:.1f}s for account {best_account}")
            await asyncio.sleep(best_wait_time)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω–∏–π –æ–±'—î–∫—Ç –∞–∫–∞—É–Ω—Ç–∞
        account = await self.pool.get(best_account)
        if account:
            self.account_last_request[best_account] = time.time()
        
        return account
    
    async def _make_direct_request(self, operation: str, variables: Dict, account = None):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –ø—Ä—è–º–∏–π GraphQL –∑–∞–ø–∏—Ç –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å twscrape"""
        if not account:
            account = await self._get_account_with_minimal_delay()
            
        if not account:
            return None
            
        url = f"https://x.com/i/api/graphql/{GRAPHQL_OPERATIONS[operation]}"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ CSRF —Ç–æ–∫–µ–Ω –∑ cookies
        csrf_token = account.cookies.get('ct0', '')
        
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ cookies —Å–ª–æ–≤–Ω–∏–∫ –≤ —Å—Ç—Ä–æ–∫—É
        cookie_string = "; ".join([f"{k}={v}" for k, v in account.cookies.items()])
        
        headers = {
            "Authorization": f"Bearer {TOKEN}",
            "Content-Type": "application/json",
            "X-Csrf-Token": csrf_token,
            "Cookie": cookie_string,
            "User-Agent": account.user_agent,
        }
        
        data = {
            "variables": variables,
            "features": GQL_FEATURES,
        }
        
        # –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø—Ä–æ–∫—Å—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, —â–æ–± —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é–≤–∞–ª–∞
        # TODO: –î–æ–¥–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –ø—Ä–æ–∫—Å—ñ –¥–ª—è httpx 0.28.1
        async with httpx.AsyncClient(timeout=30.0) as client:
            try:
                response = await client.post(url, headers=headers, json=data)
                
                if self.debug:
                    print(f"üîó Request to {operation}: {response.status_code}")
                    
                if response.status_code == 200:
                    result = response.json()
                    return result
                else:
                    print(f"‚ùå Request failed: {response.status_code} - {response.text}")
                    return None
                    
            except Exception as e:
                print(f"‚ùå Request error: {e}")
                return None
    
    async def like_tweet(self, tweet_id: str) -> bool:
        """–õ–∞–π–∫–Ω—É—Ç–∏ —Ç–≤—ñ—Ç"""
        variables = {"tweet_id": tweet_id}
        result = await self._make_direct_request("FavoriteTweet", variables)
        return result is not None
    
    async def unlike_tweet(self, tweet_id: str) -> bool:
        """–ü—Ä–∏–±—Ä–∞—Ç–∏ –ª–∞–π–∫ –∑ —Ç–≤—ñ—Ç–∞"""
        variables = {"tweet_id": tweet_id}
        result = await self._make_direct_request("UnfavoriteTweet", variables)
        return result is not None
    
    async def retweet(self, tweet_id: str) -> bool:
        """–†–µ—Ç–≤—ñ—Ç–Ω—É—Ç–∏ —Ç–≤—ñ—Ç"""
        variables = {"tweet_id": tweet_id, "dark_request": False}
        result = await self._make_direct_request("CreateRetweet", variables)
        return result is not None
    
    async def unretweet(self, tweet_id: str) -> bool:
        """–ü—Ä–∏–±—Ä–∞—Ç–∏ —Ä–µ—Ç–≤—ñ—Ç"""
        variables = {"source_tweet_id": tweet_id, "dark_request": False}
        result = await self._make_direct_request("DeleteRetweet", variables)
        return result is not None
    
    async def view_tweet(self, tweet_id: str) -> bool:
        """–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–≤—ñ—Ç (–µ–º—É–ª—è—Ü—ñ—è)"""
        # –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –ø—Ä–æ—Å—Ç–æ —Ä–æ–±–∏–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É
        await asyncio.sleep(random.uniform(0.5, 1.5))
        return True