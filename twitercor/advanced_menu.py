#!/usr/bin/env python3
"""
Advanced Console Menu for Twitter/X Automation System

Complete management interface for accounts, tasks, proxies, and automation.
"""

import asyncio
import json
import os
import sys
from datetime import datetime
from typing import Dict, List, Optional

# Add current directory to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from twscrape import API
from twitter_automation import TwitterAutomation
from telegram_bot import TwitterTelegramBot, TwitterBotConfig


class Colors:
    """Console colors for better UX."""
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'


def print_header(text: str):
    """Print colored header."""
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*60}")
    print(f"{text.center(60)}")
    print(f"{'='*60}{Colors.END}\n")


def print_success(text: str):
    """Print success message."""
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.END}")


def print_error(text: str):
    """Print error message."""
    print(f"{Colors.RED}‚ùå {text}{Colors.END}")


def print_warning(text: str):
    """Print warning message."""
    print(f"{Colors.YELLOW}‚ö†Ô∏è {text}{Colors.END}")


def print_info(text: str):
    """Print info message."""
    print(f"{Colors.BLUE}‚ÑπÔ∏è {text}{Colors.END}")


def clear_screen():
    """Clear console screen."""
    os.system('cls' if os.name == 'nt' else 'clear')


def load_env_file(file_path: str = "config.env"):
    """Load environment variables from file."""
    if not os.path.exists(file_path):
        return
    
    with open(file_path, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key.strip()] = value.strip()


class TaskManager:
    """Manages automation tasks (posts to process)."""
    
    def __init__(self):
        self.tasks_file = "tasks.json"
        self.load_tasks()
    
    def load_tasks(self):
        """Load tasks from file."""
        if os.path.exists(self.tasks_file):
            try:
                with open(self.tasks_file, 'r', encoding='utf-8') as f:
                    self.tasks = json.load(f)
            except:
                self.tasks = []
        else:
            self.tasks = []
    
    def save_tasks(self):
        """Save tasks to file."""
        with open(self.tasks_file, 'w', encoding='utf-8') as f:
            json.dump(self.tasks, f, indent=2, ensure_ascii=False, default=str)
    
    def add_task(self, url: str, likes: int = 0, retweets: int = 0, views: int = 0, 
                 scheduled_time: str = None, priority: str = "normal"):
        """Add a new task."""
        task = {
            "id": len(self.tasks) + 1,
            "url": url,
            "likes": likes,
            "retweets": retweets,
            "views": views,
            "priority": priority,
            "status": "pending",
            "created_at": datetime.now().isoformat(),
            "scheduled_time": scheduled_time,
            "processed_at": None,
            "result": None
        }
        self.tasks.append(task)
        self.save_tasks()
        return task
    
    def get_pending_tasks(self):
        """Get all pending tasks."""
        return [task for task in self.tasks if task["status"] == "pending"]
    
    def get_task_by_id(self, task_id: int):
        """Get task by ID."""
        for task in self.tasks:
            if task["id"] == task_id:
                return task
        return None
    
    def update_task_status(self, task_id: int, status: str, result: dict = None):
        """Update task status."""
        task = self.get_task_by_id(task_id)
        if task:
            task["status"] = status
            task["result"] = result
            if status == "completed":
                task["processed_at"] = datetime.now().isoformat()
            self.save_tasks()


class ProxyManager:
    """Manages proxy settings for accounts."""
    
    def __init__(self):
        self.proxies_file = "proxies.json"
        self.load_proxies()
    
    def load_proxies(self):
        """Load proxy assignments from file."""
        if os.path.exists(self.proxies_file):
            try:
                with open(self.proxies_file, 'r', encoding='utf-8') as f:
                    self.proxies = json.load(f)
            except:
                self.proxies = {}
        else:
            self.proxies = {}
    
    def save_proxies(self):
        """Save proxy assignments to file."""
        with open(self.proxies_file, 'w', encoding='utf-8') as f:
            json.dump(self.proxies, f, indent=2, ensure_ascii=False)
    
    def assign_proxy(self, username: str, proxy: str):
        """Assign proxy to account."""
        self.proxies[username] = proxy
        self.save_proxies()
    
    def get_proxy(self, username: str):
        """Get proxy for account."""
        return self.proxies.get(username, None)
    
    def remove_proxy(self, username: str):
        """Remove proxy assignment."""
        if username in self.proxies:
            del self.proxies[username]
            self.save_proxies()
    
    async def test_proxy(self, proxy: str) -> dict:
        """Test a single proxy connection."""
        import httpx
        
        try:
            # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ –ø—Ä–æ–∫—Å—ñ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
            if not proxy.startswith(('http://', 'https://', 'socks5://')):
                proxy = 'http://' + proxy
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω—à–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, —Ç–∞–∫ —è–∫ httpbin.org –º–æ–∂–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ
            test_urls = [
                "http://ip-api.com/json/",
                "https://api.ipify.org?format=json",
                "http://httpbin.org/ip"
            ]
            
            async with httpx.AsyncClient(proxy=proxy, timeout=15.0) as client:
                for url in test_urls:
                    try:
                        response = await client.get(url)
                        if response.status_code == 200:
                            try:
                                data = response.json()
                                # –†—ñ–∑–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å IP –≤ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–ª—è—Ö
                                ip = data.get('query') or data.get('ip') or data.get('origin', 'Unknown')
                                return {
                                    "success": True,
                                    "ip": ip,
                                    "service": url.split('/')[2],
                                    "response_time": response.elapsed.total_seconds() if hasattr(response, 'elapsed') else 0
                                }
                            except:
                                # –Ø–∫—â–æ –Ω–µ JSON, –∞–ª–µ –∫–æ–¥ 200
                                return {
                                    "success": True,
                                    "ip": "Connected",
                                    "service": url.split('/')[2],
                                    "response_time": 0
                                }
                    except:
                        continue  # –ü—Ä–æ–±—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π URL
                
                return {
                    "success": False,
                    "error": "All test services failed"
                }
                    
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }


class AdvancedTwitterManager:
    """Advanced management system for Twitter automation."""
    
    def __init__(self):
        self.api = API()
        self.fast_mode = True  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —à–≤–∏–¥–∫–∏–π —Ä–µ–∂–∏–º
        self.automation = TwitterAutomation(self.api, fast_mode=self.fast_mode)
        self.task_manager = TaskManager()
        self.proxy_manager = ProxyManager()
        load_env_file()
    
    def main_menu(self):
        """Display main menu."""
        while True:
            clear_screen()
            print_header("üöÄ ADVANCED TWITTER/X AUTOMATION SYSTEM")
            
            print(f"{Colors.BOLD}üìã –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ:{Colors.END}")
            print(f"{Colors.CYAN}1.{Colors.END} üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞–º–∏")
            print(f"{Colors.CYAN}2.{Colors.END} üéØ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ (–ø–æ—Å—Ç–∞–º–∏)")
            print(f"{Colors.CYAN}3.{Colors.END} üåê –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ")
            print(f"{Colors.CYAN}4.{Colors.END} ü§ñ Telegram –±–æ—Ç")
            print(f"{Colors.CYAN}5.{Colors.END} ‚ö° –®–≤–∏–¥–∫–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ—Å—Ç—É")
            print(f"{Colors.CYAN}6.{Colors.END} üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥")
            print(f"{Colors.CYAN}7.{Colors.END} ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏")
            print(f"{Colors.CYAN}8.{Colors.END} üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
            print(f"{Colors.CYAN}9.{Colors.END} ‚ùå –í–∏—Ö—ñ–¥")
            
            choice = input(f"\n{Colors.YELLOW}–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-9): {Colors.END}").strip()
            
            if choice == "1":
                self.accounts_menu()
            elif choice == "2":
                self.tasks_menu()
            elif choice == "3":
                self.proxy_menu()
            elif choice == "4":
                self.telegram_menu()
            elif choice == "5":
                asyncio.run(self.quick_process())
            elif choice == "6":
                asyncio.run(self.statistics_menu())
            elif choice == "7":
                self.settings_menu()
            elif choice == "8":
                asyncio.run(self.testing_menu())
            elif choice == "9":
                print_success("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            else:
                print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def accounts_menu(self):
        """Account management menu."""
        while True:
            clear_screen()
            print_header("üë• –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ê–ö–ê–£–ù–¢–ê–ú–ò")
            
            print(f"{Colors.BOLD}üìã –û–ü–¶–Ü–á –ê–ö–ê–£–ù–¢–Ü–í:{Colors.END}")
            print(f"{Colors.CYAN}1.{Colors.END} üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç–∏ –∑ —Ñ–∞–π–ª—É")
            print(f"{Colors.CYAN}2.{Colors.END} ‚úÖ –î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç–∏ –∑—ñ —Å–∫—Ä–∏–ø—Ç–∞ (–≤–±—É–¥–æ–≤–∞–Ω—ñ)")
            print(f"{Colors.CYAN}3.{Colors.END} ‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç –≤—Ä—É—á–Ω—É")
            print(f"{Colors.CYAN}4.{Colors.END} üìä –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫–∞—É–Ω—Ç—ñ–≤")
            print(f"{Colors.CYAN}5.{Colors.END} üîÑ –ó–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏ –≤—Å—ñ –∞–∫–∞—É–Ω—Ç–∏")
            print(f"{Colors.CYAN}6.{Colors.END} üîì –°–∫–∏–Ω—É—Ç–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è")
            print(f"{Colors.CYAN}7.{Colors.END} üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏")
            print(f"{Colors.CYAN}8.{Colors.END} üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
            
            choice = input(f"\n{Colors.YELLOW}–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-8): {Colors.END}").strip()
            
            if choice == "1":
                asyncio.run(self.load_accounts_from_file())
            elif choice == "2":
                asyncio.run(self.add_builtin_accounts())
            elif choice == "3":
                asyncio.run(self.add_account_manually())
            elif choice == "4":
                asyncio.run(self.show_accounts_status())
            elif choice == "5":
                asyncio.run(self.login_all_accounts())
            elif choice == "6":
                asyncio.run(self.reset_locks())
            elif choice == "7":
                asyncio.run(self.delete_inactive())
            elif choice == "8":
                break
            else:
                print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def load_accounts_from_file(self):
        """Load accounts from file."""
        print_header("üìÇ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ê–ö–ê–£–ù–¢–Ü–í –ó –§–ê–ô–õ–£")
        
        print("–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ —Ñ–∞–π–ª—ñ–≤:")
        print("‚Ä¢ TXT —Ñ–∞–π–ª –∑ —Ñ–æ—Ä–º–∞—Ç–æ–º: username:password:email:auth_token:ct0:proxy")
        print("‚Ä¢ JSON —Ñ–∞–π–ª –∑ –º–∞—Å–∏–≤–æ–º –æ–±'—î–∫—Ç—ñ–≤")
        print("‚Ä¢ CSV —Ñ–∞–π–ª –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
        print()
        
        file_path = input("üìÅ –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –∞–∫–∞—É–Ω—Ç–∞–º–∏: ").strip()
        
        if not os.path.exists(file_path):
            print_error("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        try:
            if file_path.endswith('.txt'):
                await self.load_accounts_from_txt(file_path)
            elif file_path.endswith('.json'):
                await self.load_accounts_from_json(file_path)
            elif file_path.endswith('.csv'):
                await self.load_accounts_from_csv(file_path)
            else:
                print_error("–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É!")
        
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def load_accounts_from_txt(self, file_path: str):
        """Load accounts from TXT file."""
        success_count = 0
        failed_count = 0
        
        print("üìã –§–æ—Ä–º–∞—Ç TXT —Ñ–∞–π–ª—É:")
        print("username:password:email:auth_token:ct0:proxy")
        print("–ü—Ä–æ–∫—Å—ñ —î –æ–ø—Ü—ñ–π–Ω–∏–º (–º–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º)")
        print()
        
        with open(file_path, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if not line or line.startswith('#'):
                    continue
                
                parts = line.split(':')
                if len(parts) < 5:
                    print_error(f"–†—è–¥–æ–∫ {line_num}: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö")
                    failed_count += 1
                    continue
                
                username = parts[0].strip()
                password = parts[1].strip()
                email = parts[2].strip()
                auth_token = parts[3].strip()
                ct0 = parts[4].strip()
                proxy = parts[5].strip() if len(parts) > 5 else ""
                
                try:
                    # Build cookies
                    cookies = f"auth_token={auth_token}; ct0={ct0}"
                    
                    # Add account
                    await self.api.pool.add_account(
                        username=username,
                        password=password,
                        email=email,
                        email_password="dummy_pass",
                        cookies=cookies,
                        proxy=proxy if proxy else None
                    )
                    
                    # Assign proxy if provided
                    if proxy:
                        self.proxy_manager.assign_proxy(username, proxy)
                    
                    print_success(f"–î–æ–¥–∞–Ω–æ: @{username}")
                    success_count += 1
                    
                except Exception as e:
                    print_error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è @{username}: {e}")
                    failed_count += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print_success(f"–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ: {success_count}")
        if failed_count > 0:
            print_error(f"–ü–æ–º–∏–ª–∫–∏: {failed_count}")
    
    async def load_accounts_from_json(self, file_path: str):
        """Load accounts from JSON file."""
        with open(file_path, 'r', encoding='utf-8') as f:
            accounts_data = json.load(f)
        
        success_count = 0
        failed_count = 0
        
        for account in accounts_data:
            try:
                username = account.get('username') or account.get('login')
                password = account.get('password')
                email = account.get('email') or account.get('mail')
                auth_token = account.get('auth_token')
                ct0 = account.get('ct0')
                proxy = account.get('proxy', '')
                
                if not all([username, password, email, auth_token, ct0]):
                    print_error(f"–ù–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è @{username}")
                    failed_count += 1
                    continue
                
                cookies = f"auth_token={auth_token}; ct0={ct0}"
                
                await self.api.pool.add_account(
                    username=username,
                    password=password,
                    email=email,
                    email_password="dummy_pass",
                    cookies=cookies,
                    proxy=proxy if proxy else None
                )
                
                if proxy:
                    self.proxy_manager.assign_proxy(username, proxy)
                
                print_success(f"–î–æ–¥–∞–Ω–æ: @{username}")
                success_count += 1
                
            except Exception as e:
                print_error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
                failed_count += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print_success(f"–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ: {success_count}")
        if failed_count > 0:
            print_error(f"–ü–æ–º–∏–ª–∫–∏: {failed_count}")
    
    async def add_builtin_accounts(self):
        """Add built-in accounts from the original script."""
        from setup_accounts_bulk import add_all_accounts
        await add_all_accounts()
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def add_account_manually(self):
        """Add account manually."""
        print_header("‚ûï –î–û–î–ê–í–ê–ù–ù–Ø –ê–ö–ê–£–ù–¢–ê –í–†–£–ß–ù–£")
        
        username = input("üë§ Username (–±–µ–∑ @): ").strip()
        password = input("üîë Password: ").strip()
        email = input("üìß Email: ").strip()
        auth_token = input("üîê Auth Token: ").strip()
        ct0 = input("üç™ CT0 Token: ").strip()
        proxy = input("üåê Proxy (–æ–ø—Ü—ñ–π–Ω–æ, —Ñ–æ—Ä–º–∞—Ç http://user:pass@host:port): ").strip()
        
        if not all([username, password, email, auth_token, ct0]):
            print_error("–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ (–∫—Ä—ñ–º –ø—Ä–æ–∫—Å—ñ)!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        try:
            cookies = f"auth_token={auth_token}; ct0={ct0}"
            
            await self.api.pool.add_account(
                username=username,
                password=password,
                email=email,
                email_password="dummy_pass",
                cookies=cookies,
                proxy=proxy if proxy else None
            )
            
            if proxy:
                self.proxy_manager.assign_proxy(username, proxy)
            
            print_success(f"–ê–∫–∞—É–Ω—Ç @{username} –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞: {e}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def show_accounts_status(self):
        """Show accounts status with proxy info."""
        print_header("üìä –°–¢–ê–¢–£–° –ê–ö–ê–£–ù–¢–Ü–í")
        
        try:
            accounts_info = await self.api.pool.accounts_info()
            
            if not accounts_info:
                print_warning("–ê–∫–∞—É–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
                return
            
            active_count = sum(1 for acc in accounts_info if acc["active"])
            
            print(f"üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"‚Ä¢ –í—Å—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç—ñ–≤: {len(accounts_info)}")
            print(f"‚Ä¢ üü¢ –ê–∫—Ç–∏–≤–Ω—ñ: {active_count}")
            print(f"‚Ä¢ üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ: {len(accounts_info) - active_count}")
            print()
            
            print(f"{'–ê–∫–∞—É–Ω—Ç':<20} {'–°—Ç–∞—Ç—É—Å':<12} {'–ó–∞–ø–∏—Ç–∏':<8} {'–ü—Ä–æ–∫—Å—ñ':<20} {'–û—Å—Ç–∞–Ω–Ω—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è'}")
            print("-" * 80)
            
            for info in accounts_info:
                username = info["username"]
                status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π" if info["active"] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
                requests = info["total_req"]
                proxy = self.proxy_manager.get_proxy(username)
                proxy_display = proxy[:20] + "..." if proxy and len(proxy) > 20 else proxy or "–ë–µ–∑ –ø—Ä–æ–∫—Å—ñ"
                last_used = info["last_used"].strftime("%Y-%m-%d %H:%M") if info["last_used"] else "–ù—ñ–∫–æ–ª–∏"
                
                print(f"@{username:<19} {status:<12} {requests:<8} {proxy_display:<20} {last_used}")
            
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def login_all_accounts(self):
        """Login all accounts."""
        print_header("üîÑ –õ–û–ì–Ü–ù –í–°–Ü–• –ê–ö–ê–£–ù–¢–Ü–í")
        
        try:
            print("‚è≥ –õ–æ–≥—ñ–Ω–∏–º–æ –≤—Å—ñ –∞–∫–∞—É–Ω—Ç–∏...")
            result = await self.api.pool.login_all()
            
            print_success(f"–£—Å–ø—ñ—à–Ω–æ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–æ: {result['success']}")
            if result['failed'] > 0:
                print_error(f"–ü–æ–º–∏–ª–∫–∏ –ª–æ–≥—ñ–Ω—É: {result['failed']}")
            
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É: {e}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def reset_locks(self):
        """Reset account locks."""
        print_header("üîì –°–ö–ò–î–ê–ù–ù–Ø –ë–õ–û–ö–£–í–ê–ù–¨")
        
        try:
            await self.api.pool.reset_locks()
            print_success("–í—Å—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤ —Å–∫–∏–Ω—É—Ç–æ!")
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω—å: {e}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def delete_inactive(self):
        """Delete inactive accounts."""
        print_header("üóëÔ∏è –í–ò–î–ê–õ–ï–ù–ù–Ø –ù–ï–ê–ö–¢–ò–í–ù–ò–• –ê–ö–ê–£–ù–¢–Ü–í")
        
        confirm = input("‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ? –¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏! (y/N): ").strip().lower()
        
        if confirm == 'y':
            try:
                await self.api.pool.delete_inactive()
                print_success("–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ!")
            except Exception as e:
                print_error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")
        else:
            print_info("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def tasks_menu(self):
        """Tasks management menu."""
        while True:
            clear_screen()
            print_header("üéØ –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ó–ê–í–î–ê–ù–ù–Ø–ú–ò (–ü–û–°–¢–ê–ú–ò)")
            
            pending_tasks = self.task_manager.get_pending_tasks()
            completed_tasks = [t for t in self.task_manager.tasks if t["status"] == "completed"]
            
            print(f"{Colors.BOLD}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–¥–∞–Ω—å:{Colors.END}")
            print(f"‚Ä¢ üìù –û—á—ñ–∫—É—é—Ç—å: {len(pending_tasks)}")
            print(f"‚Ä¢ ‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: {len(completed_tasks)}")
            print(f"‚Ä¢ üìã –í—Å—å–æ–≥–æ: {len(self.task_manager.tasks)}")
            print()
            
            print(f"{Colors.BOLD}üìã –û–ü–¶–Ü–á –ó–ê–í–î–ê–ù–¨:{Colors.END}")
            print(f"{Colors.CYAN}1.{Colors.END} ‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
            print(f"{Colors.CYAN}2.{Colors.END} üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è")
            print(f"{Colors.CYAN}3.{Colors.END} üìù –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è")
            print(f"{Colors.CYAN}4.{Colors.END} ‚ñ∂Ô∏è –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")
            print(f"{Colors.CYAN}5.{Colors.END} ‚ö° –í–∏–∫–æ–Ω–∞—Ç–∏ –≤—Å—ñ –æ—á—ñ–∫—É–≤–∞–Ω—ñ")
            print(f"{Colors.CYAN}6.{Colors.END} üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")
            print(f"{Colors.CYAN}7.{Colors.END} üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É")
            print(f"{Colors.CYAN}8.{Colors.END} üíæ –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")
            print(f"{Colors.CYAN}9.{Colors.END} üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
            
            choice = input(f"\n{Colors.YELLOW}–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-9): {Colors.END}").strip()
            
            if choice == "1":
                self.add_task()
            elif choice == "2":
                self.show_all_tasks()
            elif choice == "3":
                self.show_pending_tasks()
            elif choice == "4":
                asyncio.run(self.execute_task())
            elif choice == "5":
                asyncio.run(self.execute_all_tasks())
            elif choice == "6":
                self.delete_task()
            elif choice == "7":
                self.load_tasks_from_file()
            elif choice == "8":
                self.export_results()
            elif choice == "9":
                break
            else:
                print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def add_task(self):
        """Add new task."""
        print_header("‚ûï –î–û–î–ê–í–ê–ù–ù–Ø –ù–û–í–û–ì–û –ó–ê–í–î–ê–ù–ù–Ø")
        
        url = input("üîó URL –ø–æ—Å—Ç—É (Twitter/X): ").strip()
        if not url:
            print_error("URL –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        print("\nüéõÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ—ó:")
        print("üí° –ó–∞–ª–∏—à—ñ—Ç—å –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É")
        
        likes_input = input("‚ù§Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–π–∫—ñ–≤ (auto): ").strip()
        retweets_input = input("üîÑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ç–≤—ñ—Ç—ñ–≤ (auto): ").strip()
        views_input = input("üëÄ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ (auto): ").strip()
        
        likes = int(likes_input) if likes_input.isdigit() else 0
        retweets = int(retweets_input) if retweets_input.isdigit() else 0
        views = int(views_input) if views_input.isdigit() else 0
        
        print("\n‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∑–∞–≤–¥–∞–Ω–Ω—è:")
        print("1. –ù–∏–∑—å–∫–∏–π")
        print("2. –ù–æ—Ä–º–∞–ª—å–Ω–∏–π") 
        print("3. –í–∏—Å–æ–∫–∏–π")
        print("4. –ö—Ä–∏—Ç–∏—á–Ω–∏–π")
        
        priority_choice = input("–û–±–µ—Ä—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (1-4, default 2): ").strip()
        priority_map = {"1": "low", "2": "normal", "3": "high", "4": "critical"}
        priority = priority_map.get(priority_choice, "normal")
        
        task = self.task_manager.add_task(
            url=url,
            likes=likes,
            retweets=retweets,
            views=views,
            priority=priority
        )
        
        print_success(f"–ó–∞–≤–¥–∞–Ω–Ω—è #{task['id']} –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print(f"üìù URL: {url}")
        print(f"‚ù§Ô∏è –õ–∞–π–∫–∏: {likes if likes > 0 else '–∞–≤—Ç–æ'}")
        print(f"üîÑ –†–µ—Ç–≤—ñ—Ç–∏: {retweets if retweets > 0 else '–∞–≤—Ç–æ'}")
        print(f"üëÄ –ü–µ—Ä–µ–≥–ª—è–¥–∏: {views if views > 0 else '–∞–≤—Ç–æ'}")
        print(f"‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {priority}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def show_all_tasks(self):
        """Show all tasks."""
        print_header("üìä –í–°–Ü –ó–ê–í–î–ê–ù–ù–Ø")
        
        if not self.task_manager.tasks:
            print_warning("–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        print(f"{'ID':<4} {'–°—Ç–∞—Ç—É—Å':<12} {'URL':<40} {'L/R/V':<12} {'–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç':<10} {'–°—Ç–≤–æ—Ä–µ–Ω–æ'}")
        print("-" * 100)
        
        for task in self.task_manager.tasks:
            url_short = task["url"][:37] + "..." if len(task["url"]) > 40 else task["url"]
            lrv = f"{task['likes']}/{task['retweets']}/{task['views']}"
            created = datetime.fromisoformat(task["created_at"]).strftime("%Y-%m-%d %H:%M")
            
            status_color = Colors.GREEN if task["status"] == "completed" else Colors.YELLOW if task["status"] == "pending" else Colors.RED
            status_display = f"{status_color}{task['status']}{Colors.END}"
            
            print(f"{task['id']:<4} {status_display:<12} {url_short:<40} {lrv:<12} {task['priority']:<10} {created}")
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def show_pending_tasks(self):
        """Show pending tasks."""
        pending_tasks = self.task_manager.get_pending_tasks()
        
        print_header("üìù –û–ß–Ü–ö–£–í–ê–ù–Ü –ó–ê–í–î–ê–ù–ù–Ø")
        
        if not pending_tasks:
            print_warning("–û—á—ñ–∫—É–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –Ω–µ–º–∞—î.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        for i, task in enumerate(pending_tasks, 1):
            print(f"{Colors.CYAN}{i}. –ó–∞–≤–¥–∞–Ω–Ω—è #{task['id']}{Colors.END}")
            print(f"   üîó URL: {task['url']}")
            print(f"   ‚ù§Ô∏è –õ–∞–π–∫–∏: {task['likes'] if task['likes'] > 0 else '–∞–≤—Ç–æ'}")
            print(f"   üîÑ –†–µ—Ç–≤—ñ—Ç–∏: {task['retweets'] if task['retweets'] > 0 else '–∞–≤—Ç–æ'}")
            print(f"   üëÄ –ü–µ—Ä–µ–≥–ª—è–¥–∏: {task['views'] if task['views'] > 0 else '–∞–≤—Ç–æ'}")
            print(f"   ‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {task['priority']}")
            print()
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def execute_task(self):
        """Execute specific task."""
        pending_tasks = self.task_manager.get_pending_tasks()
        
        if not pending_tasks:
            print_warning("–ù–µ–º–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        print_header("‚ñ∂Ô∏è –í–ò–ö–û–ù–ê–ù–ù–Ø –ó–ê–í–î–ê–ù–ù–Ø")
        
        print("–û—á—ñ–∫—É–≤–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:")
        for i, task in enumerate(pending_tasks, 1):
            print(f"{i}. #{task['id']} - {task['url'][:50]}...")
        
        try:
            choice = int(input(f"\n–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è (1-{len(pending_tasks)}): ").strip())
            if 1 <= choice <= len(pending_tasks):
                task = pending_tasks[choice - 1]
                await self._execute_single_task(task)
            else:
                print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è.")
        except ValueError:
            print_error("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä.")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def _execute_single_task(self, task):
        """Execute single task."""
        print(f"\nüéØ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è #{task['id']}")
        print(f"üîó URL: {task['url']}")
        
        try:
            self.task_manager.update_task_status(task['id'], "processing")
            
            if task['likes'] == 0 and task['retweets'] == 0 and task['views'] == 0:
                # Auto mode
                result = await self.automation.auto_engage_tweet(task['url'])
            else:
                # Custom numbers
                result = await self.automation.process_tweet_url(
                    task['url'],
                    task['likes'],
                    task['retweets'], 
                    task['views']
                )
            
            if "error" in result:
                self.task_manager.update_task_status(task['id'], "failed", result)
                print_error(f"–ü–æ–º–∏–ª–∫–∞: {result['error']}")
            else:
                self.task_manager.update_task_status(task['id'], "completed", result)
                actions = result.get("actions", {})
                print_success("–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
                print(f"‚ù§Ô∏è –õ–∞–π–∫–∏: {actions.get('likes', 0)}")
                print(f"üîÑ –†–µ—Ç–≤—ñ—Ç–∏: {actions.get('retweets', 0)}")
                print(f"üëÄ –ü–µ—Ä–µ–≥–ª—è–¥–∏: {actions.get('views', 0)}")
                
                if result.get("errors"):
                    print_warning(f"–î–µ—è–∫—ñ –¥—ñ—ó –Ω–µ –≤–¥–∞–ª–∏—Å—è: {len(result['errors'])} –ø–æ–º–∏–ª–æ–∫")
        
        except Exception as e:
            self.task_manager.update_task_status(task['id'], "failed", {"error": str(e)})
            print_error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
    
    async def execute_all_tasks(self):
        """Execute all pending tasks."""
        pending_tasks = self.task_manager.get_pending_tasks()
        
        if not pending_tasks:
            print_warning("–ù–µ–º–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        print_header("‚ö° –í–ò–ö–û–ù–ê–ù–ù–Ø –í–°–Ü–• –ó–ê–í–î–ê–ù–¨")
        
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(pending_tasks)} –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.")
        confirm = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å? (y/N): ").strip().lower()
        
        if confirm != 'y':
            print_info("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        success_count = 0
        failed_count = 0
        
        for i, task in enumerate(pending_tasks, 1):
            print(f"\nüìù –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è {i}/{len(pending_tasks)}")
            try:
                await self._execute_single_task(task)
                success_count += 1
                
                # Delay between tasks
                if i < len(pending_tasks):
                    delay = 30  # 30 seconds between tasks
                    print(f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–≤–¥–∞–Ω–Ω—è–º...")
                    await asyncio.sleep(delay)
                    
            except Exception as e:
                print_error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è #{task['id']}: {e}")
                failed_count += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:")
        print_success(f"–£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ: {success_count}")
        if failed_count > 0:
            print_error(f"–ü–æ–º–∏–ª–∫–∏: {failed_count}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def proxy_menu(self):
        """Proxy management menu."""
        while True:
            clear_screen()
            print_header("üåê –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ü–†–û–ö–°–Ü")
            
            proxy_count = len(self.proxy_manager.proxies)
            
            print(f"{Colors.BOLD}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å—ñ:{Colors.END}")
            print(f"‚Ä¢ üåê –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –ø—Ä–æ–∫—Å—ñ: {proxy_count}")
            print()
            
            print(f"{Colors.BOLD}üìã –û–ü–¶–Ü–á –ü–†–û–ö–°–Ü:{Colors.END}")
            print(f"{Colors.CYAN}1.{Colors.END} üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ")
            print(f"{Colors.CYAN}2.{Colors.END} ‚ûï –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –ø—Ä–æ–∫—Å—ñ –∞–∫–∞—É–Ω—Ç—É")
            print(f"{Colors.CYAN}3.{Colors.END} üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ–∫—Å—ñ –∑ —Ñ–∞–π–ª—É")
            print(f"{Colors.CYAN}4.{Colors.END} üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ")
            print(f"{Colors.CYAN}5.{Colors.END} üß™ –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–∫—Å—ñ")
            print(f"{Colors.CYAN}6.{Colors.END} üîç –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –æ–¥–∏–Ω –ø—Ä–æ–∫—Å—ñ")
            print(f"{Colors.CYAN}7.{Colors.END} üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–∫—Å—ñ")
            print(f"{Colors.CYAN}8.{Colors.END} üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
            
            choice = input(f"\n{Colors.YELLOW}–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-8): {Colors.END}").strip()
            
            if choice == "1":
                self.show_proxy_settings()
            elif choice == "2":
                asyncio.run(self.assign_proxy_to_account())
            elif choice == "3":
                asyncio.run(self.load_proxies_from_file())
            elif choice == "4":
                asyncio.run(self.auto_assign_proxies())
            elif choice == "5":
                asyncio.run(self.test_proxies())
            elif choice == "6":
                asyncio.run(self.test_single_proxy())
            elif choice == "7":
                self.remove_proxy()
            elif choice == "8":
                break
            else:
                print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def quick_process(self):
        """Quick post processing."""
        print_header("‚ö° –®–í–ò–î–ö–ê –û–ë–†–û–ë–ö–ê –ü–û–°–¢–£")
        
        active_accounts = await self.automation.get_active_accounts()
        if not active_accounts:
            print_error("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        print(f"üë• –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∞—É–Ω—Ç—ñ–≤: {len(active_accounts)}")
        
        url = input("üîó URL –ø–æ—Å—Ç—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏: ").strip()
        if not url:
            print_error("URL –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        print("\nüéÆ –†–µ–∂–∏–º –æ–±—Ä–æ–±–∫–∏:")
        print("1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π (—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —á–∏—Å–ª–∞)")
        print("2. –ö–∞—Å—Ç–æ–º–Ω—ñ —á–∏—Å–ª–∞")
        print("3. –í–∏—Å–æ–∫–∏–π engagement")
        print("4. –ù–∏–∑—å–∫–∏–π engagement")
        
        mode = input("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º (1-4): ").strip()
        
        try:
            if mode == "1":
                result = await self.automation.auto_engage_tweet(url)
            elif mode == "2":
                likes = int(input("‚ù§Ô∏è –õ–∞–π–∫–∏: ") or "0")
                retweets = int(input("üîÑ –†–µ—Ç–≤—ñ—Ç–∏: ") or "0")
                views = int(input("üëÄ –ü–µ—Ä–µ–≥–ª—è–¥–∏: ") or "0")
                result = await self.automation.process_tweet_url(url, likes, retweets, views)
            elif mode == "3":
                total = len(active_accounts)
                likes = min(total, int(total * 0.7))
                retweets = min(total, int(total * 0.4))
                views = min(total, int(total * 0.9))
                result = await self.automation.process_tweet_url(url, likes, retweets, views)
            elif mode == "4":
                total = len(active_accounts)
                likes = max(1, int(total * 0.1))
                retweets = max(0, int(total * 0.03))
                views = max(1, int(total * 0.3))
                result = await self.automation.process_tweet_url(url, likes, retweets, views)
            else:
                print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ä–µ–∂–∏–º.")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
                return
            
            if "error" in result:
                print_error(f"–ü–æ–º–∏–ª–∫–∞: {result['error']}")
            else:
                actions = result.get("actions", {})
                print_success("–û–±—Ä–æ–±–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                print(f"‚ù§Ô∏è –õ–∞–π–∫–∏: {actions.get('likes', 0)}")
                print(f"üîÑ –†–µ—Ç–≤—ñ—Ç–∏: {actions.get('retweets', 0)}")
                print(f"üëÄ –ü–µ—Ä–µ–≥–ª—è–¥–∏: {actions.get('views', 0)}")
                
                if result.get("errors"):
                    print_warning(f"–î–µ—è–∫—ñ –¥—ñ—ó –Ω–µ –≤–¥–∞–ª–∏—Å—è: {len(result['errors'])} –ø–æ–º–∏–ª–æ–∫")
        
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def show_proxy_settings(self):
        """Show proxy settings for all accounts."""
        print_header("üìä –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ü–†–û–ö–°–Ü")
        
        if not self.proxy_manager.proxies:
            print_warning("–ü—Ä–æ–∫—Å—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        print(f"{'–ê–∫–∞—É–Ω—Ç':<20} {'–ü—Ä–æ–∫—Å—ñ'}")
        print("-" * 60)
        
        for username, proxy in self.proxy_manager.proxies.items():
            print(f"@{username:<19} {proxy}")
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def assign_proxy_to_account(self):
        """Assign proxy to specific account."""
        print_header("‚ûï –ü–†–ò–ó–ù–ê–ß–ï–ù–ù–Ø –ü–†–û–ö–°–Ü –ê–ö–ê–£–ù–¢–£")
        
        try:
            accounts_info = await self.api.pool.accounts_info()
            if not accounts_info:
                print_warning("–ê–∫–∞—É–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
                return
            
            print("–î–æ—Å—Ç—É–ø–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏:")
            for i, acc in enumerate(accounts_info, 1):
                current_proxy = self.proxy_manager.get_proxy(acc["username"]) or "–ë–µ–∑ –ø—Ä–æ–∫—Å—ñ"
                print(f"{i}. @{acc['username']} (–∑–∞—Ä–∞–∑: {current_proxy})")
            
            try:
                choice = int(input(f"\n–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç (1-{len(accounts_info)}): ").strip())
                if 1 <= choice <= len(accounts_info):
                    account = accounts_info[choice - 1]
                    username = account["username"]
                    
                    print(f"\n–§–æ—Ä–º–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ:")
                    print("‚Ä¢ http://user:pass@host:port")
                    print("‚Ä¢ https://user:pass@host:port")
                    print("‚Ä¢ socks5://user:pass@host:port")
                    
                    proxy = input(f"\n–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–∫—Å—ñ –¥–ª—è @{username}: ").strip()
                    
                    if proxy:
                        self.proxy_manager.assign_proxy(username, proxy)
                        print_success(f"–ü—Ä–æ–∫—Å—ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è @{username}")
                    else:
                        self.proxy_manager.remove_proxy(username)
                        print_success(f"–ü—Ä–æ–∫—Å—ñ –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è @{username}")
                else:
                    print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∞–∫–∞—É–Ω—Ç–∞.")
            except ValueError:
                print_error("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä.")
                
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def load_proxies_from_file(self):
        """Load proxies from file."""
        print_header("üìÇ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ü–†–û–ö–°–Ü –ó –§–ê–ô–õ–£")
        
        print("–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:")
        print("‚Ä¢ TXT —Ñ–∞–π–ª: –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ = –æ–¥–∏–Ω –ø—Ä–æ–∫—Å—ñ")
        print("‚Ä¢ –§–æ—Ä–º–∞—Ç: username:proxy –∞–±–æ –ø—Ä–æ—Å—Ç–æ proxy")
        print()
        
        file_path = input("üìÅ –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –ø—Ä–æ–∫—Å—ñ: ").strip()
        
        if not os.path.exists(file_path):
            print_error("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        try:
            proxies_list = []
            with open(file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        if ':' in line and line.count(':') >= 3:  # Contains proxy format
                            parts = line.split(':', 1)
                            if len(parts) == 2:
                                username, proxy = parts
                                self.proxy_manager.assign_proxy(username.strip(), proxy.strip())
                            else:
                                proxies_list.append(line)
                        else:
                            proxies_list.append(line)
            
            if proxies_list:
                print(f"\n–ó–Ω–∞–π–¥–µ–Ω–æ {len(proxies_list)} –ø—Ä–æ–∫—Å—ñ –±–µ–∑ –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –∞–∫–∞—É–Ω—Ç—ñ–≤.")
                auto_assign = input("–•–æ—á–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ —ó—Ö –º—ñ–∂ –∞–∫–∞—É–Ω—Ç–∞–º–∏? (y/N): ").strip().lower()
                
                if auto_assign == 'y':
                    await self._auto_distribute_proxies(proxies_list)
                else:
                    print_info("–ü—Ä–æ–∫—Å—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –∞–ª–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ.")
                    print_info("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ' –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.")
            
            print_success("–ü—Ä–æ–∫—Å—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
            
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ: {e}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def _auto_distribute_proxies(self, proxies_list):
        """Auto distribute proxies among accounts."""
        try:
            accounts_info = await self.api.pool.accounts_info()
            accounts_without_proxy = [acc for acc in accounts_info 
                                    if not self.proxy_manager.get_proxy(acc["username"])]
            
            for i, account in enumerate(accounts_without_proxy):
                if i < len(proxies_list):
                    proxy = proxies_list[i]
                    self.proxy_manager.assign_proxy(account["username"], proxy)
                    print_success(f"@{account['username']} -> {proxy}")
            
            if len(proxies_list) > len(accounts_without_proxy):
                print_warning(f"–ó–∞–ª–∏—à–∏–ª–æ—Å—è {len(proxies_list) - len(accounts_without_proxy)} –ø—Ä–æ–∫—Å—ñ")
            
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø—Ä–æ–∫—Å—ñ: {e}")
    
    def auto_assign_proxies(self):
        """Auto assign proxies to accounts without proxy."""
        print_header("üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ü–†–ò–ó–ù–ê–ß–ï–ù–ù–Ø –ü–†–û–ö–°–Ü")
        
        # Check if we have any free proxies in my_proxies.txt
        if os.path.exists("my_proxies.txt"):
            try:
                with open("my_proxies.txt", 'r', encoding='utf-8') as f:
                    all_proxies = []
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#'):
                            all_proxies.append(line)
                
                if not all_proxies:
                    print_warning("–§–∞–π–ª my_proxies.txt –ø–æ—Ä–æ–∂–Ω—ñ–π!")
                    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
                    return
                
                # Get accounts without proxies
                asyncio.run(self._perform_auto_proxy_assignment(all_proxies))
                
            except Exception as e:
                print_error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –ø—Ä–æ–∫—Å—ñ: {e}")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
        else:
            print_warning("–§–∞–π–ª my_proxies.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            print_info("–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª my_proxies.txt –∑ –ø—Ä–æ–∫—Å—ñ –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def _perform_auto_proxy_assignment(self, proxies_list):
        """Perform automatic proxy assignment."""
        try:
            accounts_info = await self.api.pool.accounts_info()
            if not accounts_info:
                print_warning("–ê–∫–∞—É–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
                return
            
            # Find accounts without proxies
            accounts_without_proxy = []
            for account in accounts_info:
                username = account["username"]
                if not self.proxy_manager.get_proxy(username):
                    accounts_without_proxy.append(username)
            
            if not accounts_without_proxy:
                print_success("–í—Å—ñ –∞–∫–∞—É–Ω—Ç–∏ –≤–∂–µ –º–∞—é—Ç—å –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –ø—Ä–æ–∫—Å—ñ!")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
                return
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"‚Ä¢ –í—Å—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç—ñ–≤: {len(accounts_info)}")
            print(f"‚Ä¢ –ë–µ–∑ –ø—Ä–æ–∫—Å—ñ: {len(accounts_without_proxy)}")
            print(f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–∫—Å—ñ: {len(proxies_list)}")
            print()
            
            if len(proxies_list) < len(accounts_without_proxy):
                print_warning(f"–ü—Ä–æ–∫—Å—ñ –º–µ–Ω—à–µ –Ω—ñ–∂ –∞–∫–∞—É–Ω—Ç—ñ–≤ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ!")
                print(f"–ë—É–¥–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ {len(proxies_list)} –ø—Ä–æ–∫—Å—ñ")
            
            confirm = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è? (y/N): ").strip().lower()
            if confirm != 'y':
                print_info("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
                return
            
            # Assign proxies
            assigned_count = 0
            for i, username in enumerate(accounts_without_proxy):
                if i < len(proxies_list):
                    proxy = proxies_list[i]
                    self.proxy_manager.assign_proxy(username, proxy)
                    print_success(f"@{username} -> {proxy[:50]}{'...' if len(proxy) > 50 else ''}")
                    assigned_count += 1
            
            print(f"\n‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ {assigned_count} –ø—Ä–æ–∫—Å—ñ!")
            
            if len(proxies_list) > len(accounts_without_proxy):
                remaining = len(proxies_list) - len(accounts_without_proxy)
                print_info(f"–ó–∞–ª–∏—à–∏–ª–æ—Å—è {remaining} –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –ø—Ä–æ–∫—Å—ñ")
            
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ: {e}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def test_proxies(self):
        """Test proxy connections."""
        print_header("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–†–û–ö–°–Ü")
        
        if not self.proxy_manager.proxies:
            print_warning("–ü—Ä–æ–∫—Å—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        print("‚è≥ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ...")
        print(f"üîç –í—Å—å–æ–≥–æ –ø—Ä–æ–∫—Å—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {len(self.proxy_manager.proxies)}")
        print()
        
        working_count = 0
        failed_count = 0
        
        for username, proxy in self.proxy_manager.proxies.items():
            print(f"üîÑ –¢–µ—Å—Ç—É—î–º–æ @{username}...", end=" ")
            
            result = await self.proxy_manager.test_proxy(proxy)
            
            if result["success"]:
                print_success(f"‚úÖ IP: {result['ip']} ({result.get('response_time', 0):.2f}s)")
                working_count += 1
            else:
                print_error(f"‚ùå {result['error']}")
                failed_count += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
        print_success(f"‚úÖ –ü—Ä–∞—Ü—é—é—Ç—å: {working_count}")
        if failed_count > 0:
            print_error(f"‚ùå –ù–µ –ø—Ä–∞—Ü—é—é—Ç—å: {failed_count}")
        
        if working_count > 0:
            percentage = (working_count / (working_count + failed_count)) * 100
            print(f"üìà –í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∞—Ü—é—é—á–∏—Ö: {percentage:.1f}%")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def test_single_proxy(self):
        """Test a single proxy connection."""
        print_header("üîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –û–î–ù–û–ì–û –ü–†–û–ö–°–Ü")
        
        print("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–∫—Å—ñ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ:")
        print("‚Ä¢ http://username:password@ip:port")
        print("‚Ä¢ username:password@ip:port")
        print("‚Ä¢ ip:port")
        print()
        
        proxy_input = input("üîó –í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–∫—Å—ñ: ").strip()
        
        if not proxy_input:
            print_error("–ü—Ä–æ–∫—Å—ñ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        print(f"‚è≥ –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–æ–∫—Å—ñ: {proxy_input}")
        print()
        
        result = await self.proxy_manager.test_proxy(proxy_input)
        
        if result["success"]:
            print_success(f"‚úÖ –ü—Ä–æ–∫—Å—ñ –ø—Ä–∞—Ü—é—î!")
            print(f"üåê IP: {result['ip']}")
            print(f"üèÜ –°–µ—Ä–≤—ñ—Å: {result.get('service', 'Unknown')}")
            if result.get('response_time'):
                print(f"‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {result['response_time']:.2f}s")
        else:
            print_error(f"‚ùå –ü—Ä–æ–∫—Å—ñ –Ω–µ –ø—Ä–∞—Ü—é—î: {result['error']}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def remove_proxy(self):
        """Remove proxy from account."""
        print_header("üóëÔ∏è –í–ò–î–ê–õ–ï–ù–ù–Ø –ü–†–û–ö–°–Ü")
        
        if not self.proxy_manager.proxies:
            print_warning("–ü—Ä–æ–∫—Å—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        print("–ê–∫–∞—É–Ω—Ç–∏ –∑ –ø—Ä–æ–∫—Å—ñ:")
        usernames = list(self.proxy_manager.proxies.keys())
        for i, username in enumerate(usernames, 1):
            proxy = self.proxy_manager.proxies[username]
            print(f"{i}. @{username} -> {proxy}")
        
        try:
            choice = int(input(f"\n–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ (1-{len(usernames)}): ").strip())
            if 1 <= choice <= len(usernames):
                username = usernames[choice - 1]
                self.proxy_manager.remove_proxy(username)
                print_success(f"–ü—Ä–æ–∫—Å—ñ –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è @{username}")
            else:
                print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä.")
        except ValueError:
            print_error("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä.")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def telegram_menu(self):
        """Telegram bot menu."""
        print_header("ü§ñ TELEGRAM –ë–û–¢")
        
        bot_token = os.getenv("TELEGRAM_BOT_TOKEN", "")
        
        print(f"{Colors.BOLD}üìä –°—Ç–∞—Ç—É—Å Telegram –±–æ—Ç–∞:{Colors.END}")
        print(f"‚Ä¢ üîë –¢–æ–∫–µ–Ω: {'‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ' if bot_token else '‚ùå –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'}")
        print(f"‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–∂–∏–º: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if os.getenv('AUTO_MODE', 'true').lower() == 'true' else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}")
        print()
        
        if not bot_token:
            print_error("Telegram –±–æ—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!")
            print("–î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
            print("1. –°—Ç–≤–æ—Ä—ñ—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather")
            print("2. –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
            print("3. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å TELEGRAM_BOT_TOKEN –≤ config.env")
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        print(f"{Colors.BOLD}üìã –û–ü–¶–Ü–á –ë–û–¢–ê:{Colors.END}")
        print(f"{Colors.CYAN}1.{Colors.END} ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ Telegram –±–æ—Ç–∞")
        print(f"{Colors.CYAN}2.{Colors.END} ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞")
        print(f"{Colors.CYAN}3.{Colors.END} üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
        print(f"{Colors.CYAN}4.{Colors.END} üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        
        choice = input(f"\n{Colors.YELLOW}–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-4): {Colors.END}").strip()
        
        if choice == "1":
            self.run_telegram_bot()
        elif choice == "2":
            self.telegram_settings()
        elif choice == "3":
            self.telegram_stats()
        elif choice == "4":
            return
        else:
            print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def run_telegram_bot(self):
        """Run Telegram bot."""
        print_header("‚ñ∂Ô∏è –ó–ê–ü–£–°–ö TELEGRAM –ë–û–¢–ê")
        
        try:
            config = TwitterBotConfig()
            bot = TwitterTelegramBot(config)
            
            print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            print("üí° –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
            print()
            
            bot.run()
            
        except KeyboardInterrupt:
            print_success("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def statistics_menu(self):
        """Statistics and monitoring menu."""
        print_header("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ê –ú–û–ù–Ü–¢–û–†–ò–ù–ì")
        
        try:
            # Account stats
            accounts_info = await self.api.pool.accounts_info()
            stats = await self.api.pool.stats()
            
            active_count = sum(1 for acc in accounts_info if acc["active"])
            
            print(f"{Colors.BOLD}üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∞—É–Ω—Ç—ñ–≤:{Colors.END}")
            print(f"‚Ä¢ –í—Å—å–æ–≥–æ: {len(accounts_info)}")
            print(f"‚Ä¢ üü¢ –ê–∫—Ç–∏–≤–Ω—ñ: {active_count}")
            print(f"‚Ä¢ üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ: {len(accounts_info) - active_count}")
            
            # Task stats
            completed_tasks = [t for t in self.task_manager.tasks if t["status"] == "completed"]
            pending_tasks = self.task_manager.get_pending_tasks()
            
            print(f"\n{Colors.BOLD}üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–¥–∞–Ω—å:{Colors.END}")
            print(f"‚Ä¢ –í—Å—å–æ–≥–æ: {len(self.task_manager.tasks)}")
            print(f"‚Ä¢ ‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: {len(completed_tasks)}")
            print(f"‚Ä¢ üìù –û—á—ñ–∫—É—é—Ç—å: {len(pending_tasks)}")
            
            # Proxy stats
            proxy_count = len(self.proxy_manager.proxies)
            accounts_with_proxy = sum(1 for acc in accounts_info 
                                    if self.proxy_manager.get_proxy(acc["username"]))
            
            print(f"\n{Colors.BOLD}üåê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å—ñ:{Colors.END}")
            print(f"‚Ä¢ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –ø—Ä–æ–∫—Å—ñ: {proxy_count}")
            print(f"‚Ä¢ –ê–∫–∞—É–Ω—Ç—ñ–≤ –∑ –ø—Ä–æ–∫—Å—ñ: {accounts_with_proxy}")
            
            # Recent activity
            if completed_tasks:
                print(f"\n{Colors.BOLD}üìà –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:{Colors.END}")
                recent_tasks = sorted(completed_tasks, 
                                    key=lambda x: x.get("processed_at", ""), 
                                    reverse=True)[:5]
                
                for task in recent_tasks:
                    processed_time = task.get("processed_at", "")
                    if processed_time:
                        time_str = datetime.fromisoformat(processed_time).strftime("%Y-%m-%d %H:%M")
                        url_short = task["url"][:40] + "..." if len(task["url"]) > 40 else task["url"]
                        print(f"‚Ä¢ {time_str}: {url_short}")
            
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def settings_menu(self):
        """System settings menu."""
        print_header("‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò")
        
        print(f"{Colors.BOLD}üìã –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:{Colors.END}")
        print(f"{Colors.CYAN}1.{Colors.END} üîß –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é")
        print(f"{Colors.CYAN}2.{Colors.END} üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        print(f"{Colors.CYAN}3.{Colors.END} üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é")
        print(f"{Colors.CYAN}4.{Colors.END} üíæ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é")
        print(f"{Colors.CYAN}5.{Colors.END} ‚ö° –†–µ–∂–∏–º —à–≤–∏–¥–∫–æ—Å—Ç—ñ (–∑–∞—Ä–∞–∑: {'–®–í–ò–î–ö–ò–ô' if self.fast_mode else '–°–¢–ê–ù–î–ê–†–¢–ù–ò–ô'})")
        print(f"{Colors.CYAN}6.{Colors.END} üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        
        choice = input(f"\n{Colors.YELLOW}–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-6): {Colors.END}").strip()
        
        if choice == "1":
            self.edit_config()
        elif choice == "2":
            self.show_current_settings()
        elif choice == "3":
            load_env_file()
            print_success("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
        elif choice == "4":
            self.create_backup()
        elif choice == "5":
            self.toggle_fast_mode()
        elif choice == "6":
            return
        else:
            print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def testing_menu(self):
        """Testing menu."""
        print_header("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò")
        
        active_accounts = await self.automation.get_active_accounts()
        
        print(f"{Colors.BOLD}üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:{Colors.END}")
        print(f"‚Ä¢ üë• –ê–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏: {len(active_accounts)}")
        print(f"‚Ä¢ üåê –ü—Ä–æ–∫—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ: {len(self.proxy_manager.proxies)}")
        print()
        
        print(f"{Colors.BOLD}üìã –¢–ï–°–¢–ò:{Colors.END}")
        print(f"{Colors.CYAN}1.{Colors.END} üß™ –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤")
        print(f"{Colors.CYAN}2.{Colors.END} üåê –¢–µ—Å—Ç –ø—Ä–æ–∫—Å—ñ")
        print(f"{Colors.CYAN}3.{Colors.END} üéØ –¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å—Ç—É")
        print(f"{Colors.CYAN}4.{Colors.END} ü§ñ –¢–µ—Å—Ç API –æ–ø–µ—Ä–∞—Ü—ñ–π")
        print(f"{Colors.CYAN}5.{Colors.END} üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        
        choice = input(f"\n{Colors.YELLOW}–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç (1-5): {Colors.END}").strip()
        
        if choice == "1":
            await self.test_accounts_connection()
        elif choice == "2":
            await self.test_proxies()
        elif choice == "3":
            await self.test_post_processing()
        elif choice == "4":
            await self.test_api_operations()
        elif choice == "5":
            return
        else:
            print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def test_accounts_connection(self):
        """Test accounts connection."""
        print_header("üß™ –¢–ï–°–¢ –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ê–ö–ê–£–ù–¢–Ü–í")
        
        try:
            accounts_info = await self.api.pool.accounts_info()
            
            if not accounts_info:
                print_warning("–ê–∫–∞—É–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
                return
            
            print("‚è≥ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤...")
            
            for account in accounts_info:
                username = account["username"]
                try:
                    # Try to get account info
                    user_info = await self.api.user_by_login(username)
                    if user_info:
                        print_success(f"@{username}: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è OK")
                    else:
                        print_error(f"@{username}: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ")
                except Exception as e:
                    print_error(f"@{username}: {str(e)[:50]}")
                
                await asyncio.sleep(1)  # Delay between tests
            
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    async def test_post_processing(self):
        """Test post processing."""
        print_header("üéØ –¢–ï–°–¢ –û–ë–†–û–ë–ö–ò –ü–û–°–¢–£")
        
        test_url = input("üîó URL –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–∞–±–æ Enter –¥–ª—è –¥–µ–º–æ): ").strip()
        if not test_url:
            test_url = "https://x.com/elonmusk/status/1234567890"
            print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–µ–º–æ URL: {test_url}")
        
        try:
            print("‚è≥ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å—Ç—É...")
            result = await self.automation.auto_engage_tweet(test_url)
            
            if "error" in result:
                print_error(f"–ü–æ–º–∏–ª–∫–∞: {result['error']}")
            else:
                actions = result.get("actions", {})
                print_success("–¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
                print(f"‚ù§Ô∏è –õ–∞–π–∫–∏: {actions.get('likes', 0)}")
                print(f"üîÑ –†–µ—Ç–≤—ñ—Ç–∏: {actions.get('retweets', 0)}")
                print(f"üëÄ –ü–µ—Ä–µ–≥–ª—è–¥–∏: {actions.get('views', 0)}")
                
        except Exception as e:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")


    def toggle_fast_mode(self):
        """Toggle between fast and standard modes."""
        self.fast_mode = not self.fast_mode
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∂–∏–º –≤ automation –æ–±'—î–∫—Ç—ñ
        self.automation.fast_mode = self.fast_mode
        
        mode_name = "–®–í–ò–î–ö–ò–ô" if self.fast_mode else "–°–¢–ê–ù–î–ê–†–¢–ù–ò–ô"
        
        print_success(f"–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {mode_name}")
        print(f"{Colors.CYAN}‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:{Colors.END}")
        if self.fast_mode:
            print("üü¢ –®–í–ò–î–ö–ò–ô –†–ï–ñ–ò–ú: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –∑–∞—Ç—Ä–∏–º–∫–∏ (3 —Å–µ–∫ –∑–∞–º—ñ—Å—Ç—å 120 —Å–µ–∫)")
            print("   ‚îî‚îÄ –®–≤–∏–¥–∫–∞ –æ–±—Ä–æ–±–∫–∞, –∞–ª–µ –≤–∏—â–∏–π —Ä–∏–∑–∏–∫ –æ–±–º–µ–∂–µ–Ω—å")
        else:
            print("üü° –°–¢–ê–ù–î–ê–†–¢–ù–ò–ô –†–ï–ñ–ò–ú: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–∞—Ç—Ä–∏–º–∫–∏ twscrape (120 —Å–µ–∫)")
            print("   ‚îî‚îÄ –ë–µ–∑–ø–µ—á–Ω—ñ—à–∏–π, –∞–ª–µ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def toggle_fast_mode(self):
        """Toggle between fast and standard mode."""
        self.fast_mode = not self.fast_mode
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∂–∏–º –≤ automation –æ–±'—î–∫—Ç—ñ
        self.automation.fast_mode = self.fast_mode
        
        mode_text = "–®–í–ò–î–ö–ò–ô" if self.fast_mode else "–°–¢–ê–ù–î–ê–†–¢–ù–ò–ô"
        print_success(f"–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {mode_text}")
        
        if self.fast_mode:
            print("üü¢ –®–í–ò–î–ö–ò–ô –†–ï–ñ–ò–ú: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –∑–∞—Ç—Ä–∏–º–∫–∏ (3 —Å–µ–∫ –∑–∞–º—ñ—Å—Ç—å 120 —Å–µ–∫)")
            print("   ‚îî‚îÄ –®–≤–∏–¥–∫–∞ –æ–±—Ä–æ–±–∫–∞, –∞–ª–µ –≤–∏—â–∏–π —Ä–∏–∑–∏–∫ –æ–±–º–µ–∂–µ–Ω—å")
        else:
            print("üü° –°–¢–ê–ù–î–ê–†–¢–ù–ò–ô –†–ï–ñ–ò–ú: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–∞—Ç—Ä–∏–º–∫–∏ twscrape (120 —Å–µ–∫)")
            print("   ‚îî‚îÄ –ë–µ–∑–ø–µ—á–Ω—ñ—à–∏–π, –∞–ª–µ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

def main():
    """Main function."""
    try:
        manager = AdvancedTwitterManager()
        asyncio.run(manager.main_menu())
    except KeyboardInterrupt:
        print(f"\n\n{Colors.YELLOW}üëã –ü—Ä–æ–≥—Ä–∞–º—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.{Colors.END}")
    except Exception as e:
        print_error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    main()